Shell commands:
* cd (along with ~)
* pwd
* mkdir (along with -p)
* ls (-la)
* find
* grep
* tee 
* wc 
* sed 
* ps 
* zip
* unzip
* tar
* untar
* curl
* wget
* du
* scp
* ssh 
* cut 
* read 
* file 
* watch 
* Miscellaneous

cd:
    * cd <directory-path>
        - directory-path can be Relative or absolute
    * cd - : switch between previous & current directories 

pwd: outputs the present working directory 

mkdir:
    * mkdir <directory-name> : creates the directory immediately
    * mkdir -p <multiple directories inside one another>: Creates parent & sub directories by itself

ls: 

find:
    looks for files/directories passed in the directory param to the find command
    syntax:
        find <directory> -[i]name '[*]<absolute name>[*]' [-type f|d]

        -i - represents case insensitive search
        f  - searches for file only
        d Â - searches for directories only 

grep:
    searches for strings inside the file(s)
        syntax: grep [options] <search string> <filename>
            options:
                -i : case insensitive
                -E : searches for multiple strings 
                -n : gives the line number
                -A : -A <number of lines to print after the string hit>
                -B : -B <number of lines to print before the string hit>
                -r : recursively search for string in the present working directory

tee:
    writes the terminal contents into a file 
        syntax: <command> | tee [-a] <path of the file>

        -a : append


wc: 
    counts chars/lines
    wc -l <filename> : counts lines
    wc -c <string>   : counts chars

sed:
    Searches the string and replaces it at the same time

    sed -[options] 's/<search string/<substitute string>/g' <filepath>
        -e: stands for expession. does not substitute in the file. just shows the result to the terminal
        -i: replaces in the file without showing anything on the terminal

ps:
    ps -[options]
        e: all users processes
        f: format the output and give more details

zip:    
    zip [options] <zip name> <directory-name or file name(s) separated with space>
        -r : recursive - useful in case of zipping the directory

unzip: 
    unzips the zip
        unzip -d <directory path> <zip file path>
        - unzip creates the directory mentioned in the command by itself

        -d : specifying the directory where it needs to be unzipped


tar: 
    creates a tar file
        tar -cvf <tar file name> <file(s) or directories separated by space>
            e.g., tar -cvf demo.tar archive diwakar\'s-training-git-29-08-2023.zip

        c: compress
        v: verbose
        f: filename

untar:
    If you want to extract the tar in a specific directory, Goto that directory and Run the command 
        tar -xvf <tar file path>

        x: extract
        v: verbose
        f: filepath

curl:
    You can do following things with curl
    * curl <url> -- Gives the page contents on the terminal 
    * Can be used for API calls
        curl -u "<username>:<password/API token> <api endpoint> 
    * curl -v <url>
        -v : verbose mode

wget:
    * Downloads the content/files from the Internet

du:
    disk usage - gives the size of the file 
        Syntax: du -sh <filename>    

ssh:
    Lets the user connect to other machine
    Syntax: ssh <username>@<IP> 
                - it asks for password
            ssh -i <private-key-file-path> <username>@<IPs>
                - Private key authenticates with the remote machine here.             
            ssh -i <private-key-file-path> -o StrictHostKeyChecking=no <username>@<IPs>
                - Useful in automation tasks

scp:
    Transfer files from/to localhost to/from the remote server
        Send files from local:
            * scp <path of the file in the local machine> [-i <private key file path>] <username>@<IP>:<remote path in the server>
        Get files from remote server:
            * scp [-i <pvt key file path>] <username>@<IP>:<filepath in the remote server> <local path of the file>

cut:
    Cuts the string based on the delimiter provided in the command
    e.g., check $ echo "hello hi bye" | cut -d' ' -f2
                  hi

read: 
    read <variable name> 

file:
    file <path of the file>
    --> lets you know what type of file it is
    
watch:
    Runs the command specified in regular intervals of the time which the user has provided to do the following
    * Keep the session alive in the terminal 
    * Monitor the output of a specific command in regular intervals 
        syntax: watch -n <time in integer> "<command>"
                e.g., watch -n3 "ls -l | grep -i blueocean"

            
* Miscellaneous:
    yum --showduplicates list <package-name> : gives you all the available versions