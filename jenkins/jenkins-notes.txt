* Installation
* Jenkins Architechture
* Nodes
* Pipeline
    * Triggers
* Administration
    * Directory Structure
* Plugin Installation 
* User Security
    * Matrix based authorization strategy



Installation:
    Steps:
        * curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
        * echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
        * apt-get update 
        * apt install openjdk-17-jre -y
        * apt-get install jenkins -y


Jenkins Architechture


Nodes:
    Prerequisites:
        * An Instance with password Authentication enabled
        * tmp space should be around 1.5 - 2GB 
    Challenges we've:
        Enable PasswordAuthentication:
            * In Azure, you can have the option to go for PasswordAuthentication by your choice
            * In AWS, by default, we cant get PasswordAuthentication enabled option. Following is the process to enable PasswordAuthentication enabled
                * see the status: systemctl status sshd
                * vim /etc/ssh/sshd_config (Enable "password Authentication and root login" to yes in the file "/etc/ssh/sshd_config" file)
                    PermitRootLogin yes
                    PasswordAuthentication yes
                * Restart the sshd service
                    systemctl restart sshd
                * Set the password for the root user
                    If you're currently in root user. following is the command 
                        passwd

        Increasing tmp space in amazon machine:
            * Run the following command
                echo 'tmpfs /tmp tmpfs rw,nodev,nosuid,size=2G 0 0' >> /etc/fstab
            * Restart the machine using UI or command
                shutdown -r now



Pipeline
    * Solved
        * We did not configure aws cli in agent by sending the Key values as input from the Jenkins Pipeline
        * Conditional executions

    * Challenges exist
        * We have to give the params all the time when we execute the Pipeline
        * Key values are appearing in the Pipeline console output
        * Jenkins inputs are showing the param values
        ----> Can be overcome with Shell script additions and using jenkins-cli 
        ----> Jenkins script console can also be useful if we know Groovy


Administration:
    * Everything in Jenkins is stored in the form of .xml files
    * Plugin Installation Insights:
        - In Jenkins, Plugins will be in the form of .jpi or .hpi stored inside $JENKINS_HOME/plugins directory
        - When Jenkins comes up, these .hpi/.jpi files will be extracted to the directory with the same name as of Plugin file
        - When you install a plugin, you will have to restart Jenkins service
    * Backup:
        Take JENKINS_HOME directory backup to meet Jenkins backup needs
    * Customization:
        * Make changes in the file /usr/lib/systemd/system/jenkins.service (For the path, see the output of 'systemctl status jenkins')
        * systemctl daemon-reload
    

Plugin Installation:
    * 2 ways of doing this Plugin Installation:
        1. Install Plugin from the UI
        2. Install plugin in the system directly:
            ~ Download the plugin into the jenkins-master machine directly
            ~ Copy the file from Downloaded location to the directory ${JENKINS_HOME}/plugins directory
            ~ Restart the Jenkins service
            ~ Plugin will be Installed 

User security:
    Matrix based authorization strategy:
    * Operates at the Global level inside the Jenkins
    * User has to be created first before granting him the permissions

    Project based matrix authorization strategy:
    * You can grant permissions at the global level and at the Project level as well - MOST ORGS USE THIS